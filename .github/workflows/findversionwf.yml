name: FIND VERSION OF ANY MODULE WORKFLOW
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    
  


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  less_complex_action_job:
    runs-on: ubuntu-latest
    name: A job to run less complex action
    steps:
      - name: Hello world action step
        id: hello
        uses: saurabhrai19/less-complex-js-ca@v1.11
        with:
          email: 'saurabh@.com'
      # Use the output from the `hello` step
      - name: Get the output time
        run: echo "The message is ${{ steps.hello.outputs.message }}"
        
  get-num-square:
    runs-on: ubuntu-latest
    name: Returns the number square
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch num squared
        id: get_square
        #uses: ./ # Uses an action in the root directory
        # or use a released GitHub Action
        uses: saurabhrai19/hello-world-python-ca@v2
        with:
          num: 11
      - name: Print the square
        run: echo "${{ steps.get_square.outputs.num_squared }}"
        
  hello_world_job:
    runs-on: ubuntu-latest
    name: A job to say hello
    steps:
      - name: Hello world action step
        id: hello
        uses: saurabhrai19/hello-world-javascript-action@v1.4
        with:
          who-to-greet: 'Mona the Octo'
      # Use the output from the `hello` step
      - name: Get the output time
        run: echo "The time was ${{ steps.hello.outputs.time }}"
        
  hello_world_dockercustomaction_job:
    runs-on: ubuntu-latest
    name: A job to say hello through docker custom action
    steps:
      - name: Hello world action step
        id: hello
        uses: actions/hello-world-docker-action@v1
        with:
          who-to-greet: 'Mona the Octocat'
      # Use the output from the `hello` step
      - name: Get the output time
        run: echo "The time was ${{ steps.hello.outputs.time }}"
   
  
        
  firstJob:    
    
      name: Find Module Version from Requirements.txt
      runs-on: ubuntu-latest
      
      steps:
        - name: checkout repo
          uses: actions/checkout@v2.3.4
        - name: Fetch Version of module step
          id: moduleversion
          uses: saurabhrai19/getpyversion@v1.15
          with:
            module-name: 'Flask'
            file-name: 'requirements.txt'
        - name: Get Output
          run: echo "The Module with Version- ${{ steps.moduleversion.outputs.modulewithver }}"
          
        - name: HTTP Request Action
  # You may pin to the exact commit or the version.
  # uses: fjogeleit/http-request-action@e3313c1a5f87ea3807b7034fb41abbb83a6533df
          uses: fjogeleit/http-request-action@v1.9.2
          with:
            # Request URL
            url: 'https://jsonplaceholder.typicode.com/todos?id=1' 
            method: 'GET'
          
        - name: "Call API 1"
          uses: indiesdev/curl@v1.1
          id: api
          with:
            url: https://reqres.in/api/users
            method: "POST"
            accept: 201
            body: '{ "name": "breeze", "job": "devops" }'
            log-response: true
            
        - name: "Call API 2"
          uses: indiesdev/curl@v1.1
          id: api1
          with:
            url: https://jsonplaceholder.typicode.com/posts
            method: "POST"
            accept: 201
            body: '{ "userId": 1231, "id": 54, "title": "devops", "body": "This is the body" }'
            log-response: true
          
        - name: "Call API"
          uses: indiesdev/curl@v1.1
      
          with:
            # The target URL
            # Required: true if custom-config is not set
            url: https://api.github.com/users/saurabhrai19/repos
            # The request method, basically it's one of GET|POST|PUT|PATCH
            # Default is GET
            method: "GET"
            log-response: true
            bearer-token: ${{ secrets.TOKENFORAPIRESPONSETESTING }}
            
        - name: "OPEN WEATHER API REQUEST"
          uses: indiesdev/curl@v1.1
      
          with:
            # The target URL
            # Required: true if custom-config is not set
            url: 'https://api.openweathermap.org/data/2.5/weather?lat=35&lon=139&appid=${{ secrets.OPENWEATHERAPITOKEN }}'
            # The request method, basically it's one of GET|POST|PUT|PATCH
            # Default is GET
            method: "GET"
            log-response: true
        - name: "Call API 2"
          uses: indiesdev/curl@v1.1
          id: api2
          with:
            url: https://reqres.in/api/users
            method: "POST"
            accept: 201
            # you can use multiline format to constrct json data object, the content should be yml format.
            # this format apply to inputs: body, headers and params
            body: |
              name: breeze
              job: devops
            log-response: true
        - name: "Use response"
          run: echo ${{ steps.api2.outputs.response.data }}
            
            
        - name: "POST LABEL FOR GITHUBAPI"
          uses: indiesdev/curl@v1.1
          id: githubapiresponse
          with:
            # The target URL
            # Required: true if custom-config is not set
            url: https://api.github.com/repos/saurabhrai19/practice_repo/labels
            # The request method, basically it's one of GET|POST|PUT|PATCH
            # Default is GET
            method: "POST"
            timeout: 10000
            #Rajesh added one more zero to make the api respond with data
            body: '{ "name": "apicreatedlabel8", "description": "This label is created from practice_repo->findversionwf.yml to recheck", "color": "f29524" }'
            log-response: true
            bearer-token: ${{ secrets.TOKENFORAPIRESPONSETESTING }}
        -  name: "Get GitHub Response"
           run: echo ${{ steps.githubapiresponse.outputs.response.data }}
        
          

            
